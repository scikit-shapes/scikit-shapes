
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/multiscaling/plot_multiscaling.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_multiscaling_plot_multiscaling.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_multiscaling_plot_multiscaling.py:


.. _multiscale_triangle_mesh_example:

Multiscaling with triangle meshes
==================================

We use the :class:`skshapes.Multiscale<skshapes.multiscaling.multiscale.Multiscale>` class to create a multiscale decomposition of a triangle mesh. This is useful to accelerate some processing steps, such as multigrid simulations or level-of-detail rendering.

.. GENERATED FROM PYTHON SOURCE LINES 11-12

First, we load the Stanford bunny as a triangle mesh.

.. GENERATED FROM PYTHON SOURCE LINES 12-19

.. code-block:: Python


    import pyvista as pv

    import skshapes as sks

    bunny = sks.PolyData(pv.examples.download_bunny())








.. GENERATED FROM PYTHON SOURCE LINES 20-21

Then, we create the multiscale representation with different sampling ratios.

.. GENERATED FROM PYTHON SOURCE LINES 21-25

.. code-block:: Python


    multiscale_bunny = sks.Multiscale(shape=bunny, ratios=[0.1, 0.01, 0.001])









.. GENERATED FROM PYTHON SOURCE LINES 26-29

Under the hood, we rely on quadric decimation (`Garland and Heckbert 1997 <https://www.cs.cmu.edu/~./garland/Papers/quadrics.pdf>`_) to reduces the number
of vertices, iteratively collapsing the edge with the smallest approximation error.
This algorithm is implemented by the `fast-simplification <https://github.com/pyvista/fast-simplification>`_ package.

.. GENERATED FROM PYTHON SOURCE LINES 29-47

.. code-block:: Python


    pl = pv.Plotter(shape=(2, 2))

    for i, ratio in enumerate([1, 0.1, 0.01, 0.001]):
        # Use the '.at()' method to access the shape at different scales
        sampled_bunny = multiscale_bunny.at(ratio=ratio)

        pl.subplot(i // 2, i % 2)
        sks.doc.display(
            plotter=pl,
            shape=sampled_bunny,
            show_edges=True,
            title=f".at(ratio={ratio}), {sampled_bunny.n_points:,} points",
        )

    pl.show()









.. tab-set::



   .. tab-item:: Static Scene



            
     .. image-sg:: /auto_examples/multiscaling/images/sphx_glr_plot_multiscaling_001.png
        :alt: plot multiscaling
        :srcset: /auto_examples/multiscaling/images/sphx_glr_plot_multiscaling_001.png
        :class: sphx-glr-single-img
     


   .. tab-item:: Interactive Scene



       .. offlineviewer:: /home/runner/work/scikit-shapes/scikit-shapes/doc/source/auto_examples/multiscaling/images/sphx_glr_plot_multiscaling_001.vtksz






.. GENERATED FROM PYTHON SOURCE LINES 48-52

Please note that calling the :meth:`~skshapes.multiscaling.multiscale.Multiscale.at` method with an arbitrary ratio
returns the most compact (i.e. the coarsest) representation stored
in the :class:`Multiscale<skshapes.multiscaling.multiscale.Multiscale>` object that is
at least as detailed as the specified ratio.

.. GENERATED FROM PYTHON SOURCE LINES 52-69

.. code-block:: Python


    pl = pv.Plotter(shape=(2, 2))

    for i, ratio in enumerate([0.5, 0.1, 0.05, 0.01]):
        # Use the '.at()' method to access the shape at different scales
        sampled_bunny = multiscale_bunny.at(ratio=ratio)

        pl.subplot(i // 2, i % 2)
        sks.doc.display(
            plotter=pl,
            shape=sampled_bunny,
            show_edges=True,
            title=f".at(ratio={ratio}), {sampled_bunny.n_points:,} points",
        )

    pl.show()








.. tab-set::



   .. tab-item:: Static Scene



            
     .. image-sg:: /auto_examples/multiscaling/images/sphx_glr_plot_multiscaling_002.png
        :alt: plot multiscaling
        :srcset: /auto_examples/multiscaling/images/sphx_glr_plot_multiscaling_002.png
        :class: sphx-glr-single-img
     


   .. tab-item:: Interactive Scene



       .. offlineviewer:: /home/runner/work/scikit-shapes/scikit-shapes/doc/source/auto_examples/multiscaling/images/sphx_glr_plot_multiscaling_002.vtksz






.. GENERATED FROM PYTHON SOURCE LINES 70-72

Alternatively, we can use the ``n_points`` parameter to specify the desired
number of points per resolution level.

.. GENERATED FROM PYTHON SOURCE LINES 72-90

.. code-block:: Python


    multiscale_bunny = sks.Multiscale(shape=bunny, n_points=[3000, 1000, 300, 100])

    pl = pv.Plotter(shape=(2, 2))

    for i, n_points in enumerate([3000, 1000, 300, 100]):
        # Use the '.at()' method with the n_points parameter instead of ratio
        sampled_bunny = multiscale_bunny.at(n_points=n_points)

        pl.subplot(i // 2, i % 2)
        sks.doc.display(
            plotter=pl,
            shape=sampled_bunny,
            show_edges=True,
            title=f".at(n_points={n_points}), {sampled_bunny.n_points:,} points",
        )

    pl.show()







.. tab-set::



   .. tab-item:: Static Scene



            
     .. image-sg:: /auto_examples/multiscaling/images/sphx_glr_plot_multiscaling_003.png
        :alt: plot multiscaling
        :srcset: /auto_examples/multiscaling/images/sphx_glr_plot_multiscaling_003.png
        :class: sphx-glr-single-img
     


   .. tab-item:: Interactive Scene



       .. offlineviewer:: /home/runner/work/scikit-shapes/scikit-shapes/doc/source/auto_examples/multiscaling/images/sphx_glr_plot_multiscaling_003.vtksz







.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 5.995 seconds)


.. _sphx_glr_download_auto_examples_multiscaling_plot_multiscaling.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_multiscaling.ipynb <plot_multiscaling.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_multiscaling.py <plot_multiscaling.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
