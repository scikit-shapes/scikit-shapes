
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/multiscaling/plot_signal_multiscale.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_multiscaling_plot_signal_multiscale.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_multiscaling_plot_signal_multiscale.py:


.. _multiscale_signal_propagation_example:

Multiscaling and signal propagation
===================================

We propagate a signal across the different shapes of a multiscale representation,
using rules that are specified by a :class:`FineToCoarsePolicy <skshapes.types.FineToCoarsePolicy>`
and a :class:`CoarseToFinePolicy <skshapes.types.CoarseToFinePolicy>`.

.. GENERATED FROM PYTHON SOURCE LINES 13-14

First, we load the Stanford bunny as a triangle mesh and sub-sample it using 10%, 1% and 0.5% of the original point count.

.. GENERATED FROM PYTHON SOURCE LINES 14-24

.. code-block:: Python


    import pyvista as pv

    import skshapes as sks

    bunny = sks.PolyData(pv.examples.download_bunny())
    ratios = [1, 0.1, 0.01, 0.001]
    multiscale_bunny = sks.Multiscale(shape=bunny, ratios=ratios)









.. GENERATED FROM PYTHON SOURCE LINES 25-26

Then, we define a signal on the original, high resolution surface mesh.

.. GENERATED FROM PYTHON SOURCE LINES 26-34

.. code-block:: Python


    # Extract the 2nd coordinate "y" of each point "xyz"
    signal = multiscale_bunny.at(ratio=1).points[:, 1]

    # Use it as a "height" signal
    multiscale_bunny.at(ratio=1).point_data["height"] = signal









.. GENERATED FROM PYTHON SOURCE LINES 35-41

We use the :meth:`~skshapes.multiscaling.multiscale.Multiscale.propagate`
method to transfer the signal from our high resolution mesh to the coarser scales.

.. note::
   Accessing the multiscale representation at ``ratio=1`` always returns the finest shape.


.. GENERATED FROM PYTHON SOURCE LINES 41-55

.. code-block:: Python

    multiscale_bunny.propagate(
        signal_name="height",
        from_ratio=1,
        fine_to_coarse_policy=sks.FineToCoarsePolicy(reduce="mean"),
    )

    pl = pv.Plotter(shape=(2, 2))
    for i, ratio in enumerate(ratios):
        pl.subplot(i // 2, i % 2)
        sks.doc.display(
            plotter=pl, shape=multiscale_bunny.at(ratio=ratio), scalars="height"
        )
    pl.show()








.. tab-set::



   .. tab-item:: Static Scene



            
     .. image-sg:: /auto_examples/multiscaling/images/sphx_glr_plot_signal_multiscale_001.png
        :alt: plot signal multiscale
        :srcset: /auto_examples/multiscaling/images/sphx_glr_plot_signal_multiscale_001.png
        :class: sphx-glr-single-img
     


   .. tab-item:: Interactive Scene



       .. offlineviewer:: /home/runner/work/scikit-shapes/scikit-shapes/doc/source/auto_examples/multiscaling/images/sphx_glr_plot_signal_multiscale_001.vtksz






.. GENERATED FROM PYTHON SOURCE LINES 56-62

Conversely, let us propagate a signal from the coarser resolutions to
the finer levels of detail.

.. note::
   Accessing the multiscale representation at ``ratio=0`` always returns the coarsest shape.


.. GENERATED FROM PYTHON SOURCE LINES 62-82

.. code-block:: Python


    signal_coarse = multiscale_bunny.at(ratio=0).points[:, 1]
    multiscale_bunny.at(ratio=0).point_data["signal"] = signal_coarse

    # propagate the signal from the lower resolutions to the higher resolution
    multiscale_bunny.propagate(
        signal_name="signal",
        from_ratio=0,
        coarse_to_fine_policy=sks.CoarseToFinePolicy(smoothing="constant"),
    )

    pl = pv.Plotter(shape=(2, 2))
    for i, ratio in enumerate(reversed(ratios)):
        pl.subplot(i // 2, i % 2)
        sks.doc.display(
            plotter=pl, shape=multiscale_bunny.at(ratio=ratio), scalars="signal"
        )
    pl.show()









.. tab-set::



   .. tab-item:: Static Scene



            
     .. image-sg:: /auto_examples/multiscaling/images/sphx_glr_plot_signal_multiscale_002.png
        :alt: plot signal multiscale
        :srcset: /auto_examples/multiscaling/images/sphx_glr_plot_signal_multiscale_002.png
        :class: sphx-glr-single-img
     


   .. tab-item:: Interactive Scene



       .. offlineviewer:: /home/runner/work/scikit-shapes/scikit-shapes/doc/source/auto_examples/multiscaling/images/sphx_glr_plot_signal_multiscale_002.vtksz






.. GENERATED FROM PYTHON SOURCE LINES 83-88

The ``"constant"`` policy results in sharp transitions between regions of
the surface that were collapsed to the same coarse point.
To mitigate this issue, we can use a ``"mesh_convolution"`` :class:`CoarseToFinePolicy <skshapes.types.CoarseToFinePolicy>`
that interleaves smoothing steps between the jumps from coarse to fine scales.


.. GENERATED FROM PYTHON SOURCE LINES 88-105

.. code-block:: Python


    multiscale_bunny.propagate(
        signal_name="signal",
        from_ratio=0,
        coarse_to_fine_policy=sks.CoarseToFinePolicy(
            smoothing="mesh_convolution",
            n_smoothing_steps=2,
        ),
    )

    pl = pv.Plotter(shape=(2, 2))
    for i, ratio in enumerate(reversed(ratios)):
        pl.subplot(i // 2, i % 2)
        sks.doc.display(
            plotter=pl, shape=multiscale_bunny.at(ratio=ratio), scalars="signal"
        )
    pl.show()







.. tab-set::



   .. tab-item:: Static Scene



            
     .. image-sg:: /auto_examples/multiscaling/images/sphx_glr_plot_signal_multiscale_003.png
        :alt: plot signal multiscale
        :srcset: /auto_examples/multiscaling/images/sphx_glr_plot_signal_multiscale_003.png
        :class: sphx-glr-single-img
     


   .. tab-item:: Interactive Scene



       .. offlineviewer:: /home/runner/work/scikit-shapes/scikit-shapes/doc/source/auto_examples/multiscaling/images/sphx_glr_plot_signal_multiscale_003.vtksz







.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 3.743 seconds)


.. _sphx_glr_download_auto_examples_multiscaling_plot_signal_multiscale.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_signal_multiscale.ipynb <plot_signal_multiscale.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_signal_multiscale.py <plot_signal_multiscale.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
