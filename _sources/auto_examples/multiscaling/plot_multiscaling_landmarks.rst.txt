
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/multiscaling/plot_multiscaling_landmarks.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_multiscaling_plot_multiscaling_landmarks.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_multiscaling_plot_multiscaling_landmarks.py:


.. _multiscale_landmarks_example:

Multiscaling and landmarks
==========================

The :class:`skshapes.Multiscale<skshapes.multiscaling.multiscale.Multiscale>` class
preserves landmarks across scales.

.. GENERATED FROM PYTHON SOURCE LINES 10-15

.. code-block:: Python


    import pyvista as pv

    import skshapes as sks








.. GENERATED FROM PYTHON SOURCE LINES 16-17

To demonstrate this, we first load a mesh with a collection of key points.

.. GENERATED FROM PYTHON SOURCE LINES 17-25

.. code-block:: Python


    mesh = sks.PolyData(pv.examples.download_louis_louvre().clean())

    landmarks = [151807, 21294, 23344, 25789, 131262, 33852, 171465, 191680]
    landmarks += [172653, 130895, 9743, 19185, 143397, 200885]

    mesh.landmark_indices = landmarks








.. GENERATED FROM PYTHON SOURCE LINES 26-28

Then, we compute a multiscale representation of our mesh
using 10%, 1% and 0.1% of the original point count.

.. GENERATED FROM PYTHON SOURCE LINES 28-32

.. code-block:: Python


    ratios = [1, 0.1, 0.01, 0.001]
    multiscale = sks.Multiscale(shape=mesh, ratios=ratios)








.. GENERATED FROM PYTHON SOURCE LINES 33-36

The :attr:`~skshapes.PolyData.landmark_points` and
:attr:`~skshapes.PolyData.landmark_indices` attributes of the shape
are transported consistently between the different scales.

.. GENERATED FROM PYTHON SOURCE LINES 36-53

.. code-block:: Python


    pl = pv.Plotter()

    pl.open_gif("animation.gif", fps=1)
    for ratio in ratios:
        mesh_i = multiscale.at(ratio=ratio)
        print(f"with {mesh_i.n_points:,d} points, landmarks = ")
        print([int(i) for i in mesh_i.landmark_indices])

        pl.clear_actors()
        sks.doc.display(plotter=pl, shape=mesh_i)
        sks.doc.display(plotter=pl, shape=mesh_i.landmark_points, color="red")
        pl.camera_position = "xz"
        pl.camera.zoom(1.4)
        pl.write_frame()

    pl.show()




.. image-sg:: /auto_examples/multiscaling/images/sphx_glr_plot_multiscaling_landmarks_001.gif
   :alt: plot multiscaling landmarks
   :srcset: /auto_examples/multiscaling/images/sphx_glr_plot_multiscaling_landmarks_001.gif
   :class: sphx-glr-single-img




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    with 210,873 points, landmarks = 
    [151807, 21294, 23344, 25789, 131262, 33852, 171465, 191680, 172653, 130895, 9743, 19185, 143397, 200885]
    with 21,067 points, landmarks = 
    [14747, 1615, 2465, 10164, 16549, 3281, 16824, 18981, 16971, 5351, 943, 1778, 13775, 16290]
    with 2,087 points, landmarks = 
    [144, 181, 205, 203, 1630, 336, 1659, 1690, 1090, 1202, 73, 157, 1917, 1566]
    with 188 points, landmarks = 
    [19, 84, 20, 17, 28, 27, 147, 33, 32, 184, 12, 126, 169, 137]





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 29.846 seconds)


.. _sphx_glr_download_auto_examples_multiscaling_plot_multiscaling_landmarks.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_multiscaling_landmarks.ipynb <plot_multiscaling_landmarks.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_multiscaling_landmarks.py <plot_multiscaling_landmarks.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
