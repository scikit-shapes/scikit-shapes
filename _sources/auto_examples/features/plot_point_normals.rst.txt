
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/features/plot_point_normals.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_features_plot_point_normals.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_features_plot_point_normals.py:


.. _point_normals_example:

How to compute local point normals
==================================

We use the :meth:`~skshapes.PolyData.point_normals` method to compute normal vectors at each vertex of a triangle mesh. This is useful for estimating the curvature of the surface.

.. GENERATED FROM PYTHON SOURCE LINES 11-12

First, we load the Stanford bunny as a triangle mesh.

.. GENERATED FROM PYTHON SOURCE LINES 12-23

.. code-block:: Python


    import pyvista as pv

    import skshapes as sks

    mesh = sks.PolyData(pv.examples.download_bunny())

    # To improve the readability of the figures below, we resample the mesh to have
    # a fixed number of points and normalize it to fit in the unit sphere.
    mesh = mesh.resample(n_points=200).normalize()








.. GENERATED FROM PYTHON SOURCE LINES 24-25

Then, we compute the point normals.

.. GENERATED FROM PYTHON SOURCE LINES 25-35

.. code-block:: Python


    normals = mesh.point_normals()

    sks.doc.display(
        title="Surface normals",
        shape=mesh,
        vectors=-0.2 * normals,
        vectors_color=normals.abs(),
    )








.. tab-set::



   .. tab-item:: Static Scene



            
     .. image-sg:: /auto_examples/features/images/sphx_glr_plot_point_normals_001.png
        :alt: plot point normals
        :srcset: /auto_examples/features/images/sphx_glr_plot_point_normals_001.png
        :class: sphx-glr-single-img
     


   .. tab-item:: Interactive Scene



       .. offlineviewer:: /home/runner/work/scikit-shapes/scikit-shapes/doc/source/auto_examples/features/images/sphx_glr_plot_point_normals_001.vtksz






.. GENERATED FROM PYTHON SOURCE LINES 36-37

Then, we compute the point normals.

.. GENERATED FROM PYTHON SOURCE LINES 37-57

.. code-block:: Python



    pl = pv.Plotter(shape=(2, 2))

    for i, scale in enumerate([0.01, 0.05, 0.1, 0.2]):

        normals = mesh.point_normals(scale=scale)

        pl.subplot(i // 2, i % 2)
        sks.doc.display(
            title=f"Normals at scale {scale:.2f}",
            plotter=pl,
            shape=mesh,
            vectors=-0.2 * normals,
            vectors_color=normals.abs(),
        )

    pl.show()









.. tab-set::



   .. tab-item:: Static Scene



            
     .. image-sg:: /auto_examples/features/images/sphx_glr_plot_point_normals_002.png
        :alt: plot point normals
        :srcset: /auto_examples/features/images/sphx_glr_plot_point_normals_002.png
        :class: sphx-glr-single-img
     


   .. tab-item:: Interactive Scene



       .. offlineviewer:: /home/runner/work/scikit-shapes/scikit-shapes/doc/source/auto_examples/features/images/sphx_glr_plot_point_normals_002.vtksz






.. GENERATED FROM PYTHON SOURCE LINES 58-59

Then, we compute the point normals.

.. GENERATED FROM PYTHON SOURCE LINES 59-75

.. code-block:: Python



    points = mesh.to_point_cloud()
    normals = points.point_normals(scale=0.1)

    pl = pv.Plotter()
    sks.doc.display(plotter=pl, shape=mesh, opacity=0.3)
    sks.doc.display(
        plotter=pl,
        title="Point normals",
        shape=points,
        point_size=20,
        vectors=0.2 * normals,
        vectors_color=normals.abs(),
    )
    pl.show()







.. tab-set::



   .. tab-item:: Static Scene



            
     .. image-sg:: /auto_examples/features/images/sphx_glr_plot_point_normals_003.png
        :alt: plot point normals
        :srcset: /auto_examples/features/images/sphx_glr_plot_point_normals_003.png
        :class: sphx-glr-single-img
     


   .. tab-item:: Interactive Scene



       .. offlineviewer:: /home/runner/work/scikit-shapes/scikit-shapes/doc/source/auto_examples/features/images/sphx_glr_plot_point_normals_003.vtksz







.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 22.315 seconds)


.. _sphx_glr_download_auto_examples_features_plot_point_normals.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_point_normals.ipynb <plot_point_normals.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_point_normals.py <plot_point_normals.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
